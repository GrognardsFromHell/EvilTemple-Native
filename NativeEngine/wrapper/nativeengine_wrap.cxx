/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_NativeEngineInterop(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_NativeEngineInterop(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_NativeEngineInterop(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#include "../nativeengine.h"
#include "../resourcemanager.h"


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <string>


#include <Ogre.h>
#include <typeinfo>

#include "../scene.h"
#include "../backgroundmap.h"
using Ogre::ColourValue;
using Ogre::Radian;


SWIGINTERN void Ogre_MovableObject_setSelectionData(Ogre::MovableObject *self,qint64 id,float radius,float height){
        ::SelectionData selectionData(id, radius, height);

        self->setUserAny(Ogre::Any(selectionData));
    }
SWIGINTERN bool Ogre_MovableObject_hasSelectionData(Ogre::MovableObject *self){
        const Ogre::Any &userAny = self->getUserAny();
        return (!userAny.isEmpty() && userAny.getType() == typeid(::SelectionData) );
    }
SWIGINTERN void Ogre_MovableObject_clearSelectionData(Ogre::MovableObject *self){
        self->setUserAny(Ogre::Any());
    }
SWIGINTERN qint64 Ogre_MovableObject_getSelectionId(Ogre::MovableObject *self){
        const Ogre::Any &userAny = self->getUserAny();
        if (userAny.isEmpty() || userAny.getType() != typeid(::SelectionData))
            throw new std::exception("This object doesn't have selection data.");
        return Ogre::any_cast<::SelectionData>(self->getUserAny()).id;
    }
SWIGINTERN float Ogre_MovableObject_getSelectionRadius(Ogre::MovableObject *self){
        const Ogre::Any &userAny = self->getUserAny();
        if (userAny.isEmpty() || userAny.getType() != typeid(::SelectionData))
            throw new std::exception("This object doesn't have selection data.");
        return Ogre::any_cast<::SelectionData>(self->getUserAny()).radius;
    }
SWIGINTERN float Ogre_MovableObject_getSelectionHeight(Ogre::MovableObject *self){
        const Ogre::Any &userAny = self->getUserAny();
        if (userAny.isEmpty() || userAny.getType() != typeid(::SelectionData))
            throw new std::exception("This object doesn't have selection data.");
        return Ogre::any_cast<::SelectionData>(self->getUserAny()).height;
    }

#include "../selectiondata.h"


typedef void (__stdcall *LogCallback)(const char *name, const char *message, int level, bool maskDebug);


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_delete_QByteArray(void * jarg1) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  
  arg1 = (QByteArray *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_QByteArray_size(void * jarg1) {
  int jresult ;
  QByteArray *arg1 = (QByteArray *) 0 ;
  int result;
  
  arg1 = (QByteArray *)jarg1; 
  {
    try {
      result = (int)(arg1)->size();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_QByteArray_constData(void * jarg1) {
  char * jresult ;
  QByteArray *arg1 = (QByteArray *) 0 ;
  char *result = 0 ;
  
  arg1 = (QByteArray *)jarg1; 
  {
    try {
      result = (char *)(arg1)->constData();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableObject_setSelectionData(void * jarg1, long long jarg2, float jarg3, float jarg4) {
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  qint64 arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::MovableObject *)jarg1; 
  arg2 = (qint64)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      Ogre_MovableObject_setSelectionData(arg1,arg2,arg3,arg4);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MovableObject_hasSelectionData(void * jarg1) {
  unsigned int jresult ;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  bool result;
  
  arg1 = (Ogre::MovableObject *)jarg1; 
  {
    try {
      result = (bool)Ogre_MovableObject_hasSelectionData(arg1);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MovableObject_clearSelectionData(void * jarg1) {
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  
  arg1 = (Ogre::MovableObject *)jarg1; 
  {
    try {
      Ogre_MovableObject_clearSelectionData(arg1);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT long long SWIGSTDCALL CSharp_MovableObject_getSelectionId(void * jarg1) {
  long long jresult ;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  qint64 result;
  
  arg1 = (Ogre::MovableObject *)jarg1; 
  {
    try {
      result = (qint64)Ogre_MovableObject_getSelectionId(arg1);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MovableObject_getSelectionRadius(void * jarg1) {
  float jresult ;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  float result;
  
  arg1 = (Ogre::MovableObject *)jarg1; 
  {
    try {
      result = (float)Ogre_MovableObject_getSelectionRadius(arg1);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MovableObject_getSelectionHeight(void * jarg1) {
  float jresult ;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  float result;
  
  arg1 = (Ogre::MovableObject *)jarg1; 
  {
    try {
      result = (float)Ogre_MovableObject_getSelectionHeight(arg1);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_setInitialState(void * jarg1) {
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  
  arg1 = (Ogre::Node *)jarg1; 
  {
    try {
      (arg1)->setInitialState();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_X_set(void * jarg1, float jarg2) {
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_X_get(void * jarg1) {
  float jresult ;
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  float result;
  
  arg1 = (Ogre::Vector3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_Y_set(void * jarg1, float jarg2) {
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_Y_get(void * jarg1) {
  float jresult ;
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  float result;
  
  arg1 = (Ogre::Vector3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_Z_set(void * jarg1, float jarg2) {
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_Z_get(void * jarg1) {
  float jresult ;
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  float result;
  
  arg1 = (Ogre::Vector3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  {
    try {
      result = (Ogre::Vector3 *)new Ogre::Vector3(arg1,arg2,arg3);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector3(void * jarg1) {
  Ogre::Vector3 *arg1 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Vector3 *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_X_set(void * jarg1, float jarg2) {
  Ogre::Quaternion *arg1 = (Ogre::Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_X_get(void * jarg1) {
  float jresult ;
  Ogre::Quaternion *arg1 = (Ogre::Quaternion *) 0 ;
  float result;
  
  arg1 = (Ogre::Quaternion *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_Y_set(void * jarg1, float jarg2) {
  Ogre::Quaternion *arg1 = (Ogre::Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_Y_get(void * jarg1) {
  float jresult ;
  Ogre::Quaternion *arg1 = (Ogre::Quaternion *) 0 ;
  float result;
  
  arg1 = (Ogre::Quaternion *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_Z_set(void * jarg1, float jarg2) {
  Ogre::Quaternion *arg1 = (Ogre::Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_Z_get(void * jarg1) {
  float jresult ;
  Ogre::Quaternion *arg1 = (Ogre::Quaternion *) 0 ;
  float result;
  
  arg1 = (Ogre::Quaternion *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_W_set(void * jarg1, float jarg2) {
  Ogre::Quaternion *arg1 = (Ogre::Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_W_get(void * jarg1) {
  float jresult ;
  Ogre::Quaternion *arg1 = (Ogre::Quaternion *) 0 ;
  float result;
  
  arg1 = (Ogre::Quaternion *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_0() {
  void * jresult ;
  Ogre::Quaternion *result = 0 ;
  
  {
    try {
      result = (Ogre::Quaternion *)new Ogre::Quaternion();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Ogre::Quaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      result = (Ogre::Quaternion *)new Ogre::Quaternion(arg1,arg2,arg3,arg4);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_FromAngleAxis(void * jarg1, float jarg2, void * jarg3) {
  Ogre::Quaternion *arg1 = (Ogre::Quaternion *) 0 ;
  Radian arg2 ;
  Ogre::Vector3 *arg3 = 0 ;
  
  arg1 = (Ogre::Quaternion *)jarg1; 
  arg2 = Ogre::Radian(jarg2);
  arg3 = (Ogre::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->FromAngleAxis(arg2,(Ogre::Vector3 const &)*arg3);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Quaternion(void * jarg1) {
  Ogre::Quaternion *arg1 = (Ogre::Quaternion *) 0 ;
  
  arg1 = (Ogre::Quaternion *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_attachObject(void * jarg1, void * jarg2) {
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::MovableObject *arg2 = (Ogre::MovableObject *) 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  arg2 = (Ogre::MovableObject *)jarg2; 
  {
    try {
      (arg1)->attachObject(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_SceneNode_numAttachedObjects(void * jarg1) {
  unsigned short jresult ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  unsigned short result;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  {
    try {
      result = (unsigned short)((Ogre::SceneNode const *)arg1)->numAttachedObjects();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_getAttachedObject(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  unsigned short arg2 ;
  Ogre::MovableObject *result = 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  {
    try {
      result = (Ogre::MovableObject *)(arg1)->getAttachedObject(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_createChildSceneNode__SWIG_0(void * jarg1) {
  void * jresult ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  {
    try {
      result = (Ogre::SceneNode *)(arg1)->createChildSceneNode();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_createChildSceneNode__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  std::string arg2 ;
  Ogre::SceneNode *result = 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  {
    try {
      result = (Ogre::SceneNode *)(arg1)->createChildSceneNode(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_getParentSceneNode(void * jarg1) {
  void * jresult ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  {
    try {
      result = (Ogre::SceneNode *)((Ogre::SceneNode const *)arg1)->getParentSceneNode();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_removeChild(void * jarg1, void * jarg2) {
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Node *arg2 = (Ogre::Node *) 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  arg2 = (Ogre::Node *)jarg2; 
  {
    try {
      (arg1)->removeChild(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_addChild(void * jarg1, void * jarg2) {
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Node *arg2 = (Ogre::Node *) 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  arg2 = (Ogre::Node *)jarg2; 
  {
    try {
      (arg1)->addChild(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_setVisible__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setVisible(arg2,arg3);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_setVisible__SWIG_1(void * jarg1, unsigned int jarg2) {
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setVisible(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SceneNode_getName(void * jarg1) {
  char * jresult ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  {
    try {
      result = (std::string *) &((Ogre::SceneNode const *)arg1)->getName();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_setPosition(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->setPosition(arg2,arg3,arg4);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_getPosition(void * jarg1) {
  void * jresult ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  {
    try {
      result = (Ogre::Vector3 *) &((Ogre::SceneNode const *)arg1)->getPosition();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_setOrientation(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  {
    try {
      (arg1)->setOrientation(arg2,arg3,arg4,arg5);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_getOrientation(void * jarg1) {
  void * jresult ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Quaternion *result = 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  {
    try {
      result = (Ogre::Quaternion *) &((Ogre::SceneNode const *)arg1)->getOrientation();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneNode_setScale(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->setScale(arg2,arg3,arg4);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_getScale(void * jarg1) {
  void * jresult ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  {
    try {
      result = (Ogre::Vector3 *) &((Ogre::SceneNode const *)arg1)->getScale();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_SceneNode_numChildren(void * jarg1) {
  unsigned short jresult ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  unsigned short result;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  {
    try {
      result = (unsigned short)((Ogre::SceneNode const *)arg1)->numChildren();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneNode_getChild(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  unsigned short arg2 ;
  Ogre::Node *result = 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  {
    try {
      result = (Ogre::Node *)((Ogre::SceneNode const *)arg1)->getChild(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_r_set(void * jarg1, float jarg2) {
  Ogre::ColourValue *arg1 = (Ogre::ColourValue *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::ColourValue *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColourValue_r_get(void * jarg1) {
  float jresult ;
  Ogre::ColourValue *arg1 = (Ogre::ColourValue *) 0 ;
  float result;
  
  arg1 = (Ogre::ColourValue *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_g_set(void * jarg1, float jarg2) {
  Ogre::ColourValue *arg1 = (Ogre::ColourValue *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::ColourValue *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColourValue_g_get(void * jarg1) {
  float jresult ;
  Ogre::ColourValue *arg1 = (Ogre::ColourValue *) 0 ;
  float result;
  
  arg1 = (Ogre::ColourValue *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_b_set(void * jarg1, float jarg2) {
  Ogre::ColourValue *arg1 = (Ogre::ColourValue *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::ColourValue *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColourValue_b_get(void * jarg1) {
  float jresult ;
  Ogre::ColourValue *arg1 = (Ogre::ColourValue *) 0 ;
  float result;
  
  arg1 = (Ogre::ColourValue *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColourValue_a_set(void * jarg1, float jarg2) {
  Ogre::ColourValue *arg1 = (Ogre::ColourValue *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::ColourValue *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColourValue_a_get(void * jarg1) {
  float jresult ;
  Ogre::ColourValue *arg1 = (Ogre::ColourValue *) 0 ;
  float result;
  
  arg1 = (Ogre::ColourValue *)jarg1; 
  result = (float) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_setType(void * jarg1, int jarg2) {
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Light::LightTypes arg2 ;
  
  arg1 = (Ogre::Light *)jarg1; 
  arg2 = (Ogre::Light::LightTypes)jarg2; 
  {
    try {
      (arg1)->setType(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light_getType(void * jarg1) {
  int jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Light::LightTypes result;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = (Ogre::Light::LightTypes)(arg1)->getType();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_setDiffuseColour(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::Light *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->setDiffuseColour(arg2,arg3,arg4);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light_getDiffuseColour(void * jarg1) {
  void * jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &((Ogre::Light const *)arg1)->getDiffuseColour();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_setSpecularColour(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::Light *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->setSpecularColour(arg2,arg3,arg4);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light_getSpecularColour(void * jarg1) {
  void * jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &((Ogre::Light const *)arg1)->getSpecularColour();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_setAttenuation(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Ogre::Light *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  {
    try {
      (arg1)->setAttenuation(arg2,arg3,arg4,arg5);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light_getAttenuationRange(void * jarg1) {
  float jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  float result;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = (float)((Ogre::Light const *)arg1)->getAttenuationRange();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light_getAttenuationConstant(void * jarg1) {
  float jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  float result;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = (float)((Ogre::Light const *)arg1)->getAttenuationConstant();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light_getAttenuationLinear(void * jarg1) {
  float jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  float result;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = (float)((Ogre::Light const *)arg1)->getAttenuationLinear();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light_getAttenuationQuadric(void * jarg1) {
  float jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  float result;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = (float)((Ogre::Light const *)arg1)->getAttenuationQuadric();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_setPosition(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::Light *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->setPosition(arg2,arg3,arg4);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light_getPosition(void * jarg1) {
  void * jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = (Ogre::Vector3 *) &((Ogre::Light const *)arg1)->getPosition();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_setDirection(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::Light *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->setDirection(arg2,arg3,arg4);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light_getDirection(void * jarg1) {
  void * jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = (Ogre::Vector3 *) &((Ogre::Light const *)arg1)->getDirection();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_setSpotlightRange(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Radian arg2 ;
  Radian arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::Light *)jarg1; 
  arg2 = Ogre::Radian(jarg2);
  arg3 = Ogre::Radian(jarg3);
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->setSpotlightRange(arg2,arg3,arg4);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light_getSpotlightInnerAngle(void * jarg1) {
  float jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Radian result;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = ((Ogre::Light const *)arg1)->getSpotlightInnerAngle();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (&result)->valueRadians();
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light_getSpotlightOuterAngle(void * jarg1) {
  float jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  Radian result;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = ((Ogre::Light const *)arg1)->getSpotlightOuterAngle();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (&result)->valueRadians();
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light_getSpotlightFalloff(void * jarg1) {
  float jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  float result;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = (float)((Ogre::Light const *)arg1)->getSpotlightFalloff();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_setPowerScale(void * jarg1, float jarg2) {
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::Light *)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->setPowerScale(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light_getPowerScale(void * jarg1) {
  float jresult ;
  Ogre::Light *arg1 = (Ogre::Light *) 0 ;
  float result;
  
  arg1 = (Ogre::Light *)jarg1; 
  {
    try {
      result = (float)((Ogre::Light const *)arg1)->getPowerScale();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformKeyFrame_setTranslate(void * jarg1, void * jarg2) {
  Ogre::TransformKeyFrame *arg1 = (Ogre::TransformKeyFrame *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  arg1 = (Ogre::TransformKeyFrame *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setTranslate((Ogre::Vector3 const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TransformKeyFrame_getTranslate(void * jarg1) {
  void * jresult ;
  Ogre::TransformKeyFrame *arg1 = (Ogre::TransformKeyFrame *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::TransformKeyFrame *)jarg1; 
  {
    try {
      result = (Ogre::Vector3 *) &((Ogre::TransformKeyFrame const *)arg1)->getTranslate();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformKeyFrame_setScale(void * jarg1, void * jarg2) {
  Ogre::TransformKeyFrame *arg1 = (Ogre::TransformKeyFrame *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  arg1 = (Ogre::TransformKeyFrame *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setScale((Ogre::Vector3 const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TransformKeyFrame_getScale(void * jarg1) {
  void * jresult ;
  Ogre::TransformKeyFrame *arg1 = (Ogre::TransformKeyFrame *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::TransformKeyFrame *)jarg1; 
  {
    try {
      result = (Ogre::Vector3 *) &((Ogre::TransformKeyFrame const *)arg1)->getScale();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransformKeyFrame_setRotation(void * jarg1, void * jarg2) {
  Ogre::TransformKeyFrame *arg1 = (Ogre::TransformKeyFrame *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  
  arg1 = (Ogre::TransformKeyFrame *)jarg1; 
  arg2 = (Ogre::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Quaternion const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setRotation((Ogre::Quaternion const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TransformKeyFrame_getRotation(void * jarg1) {
  void * jresult ;
  Ogre::TransformKeyFrame *arg1 = (Ogre::TransformKeyFrame *) 0 ;
  Ogre::Quaternion *result = 0 ;
  
  arg1 = (Ogre::TransformKeyFrame *)jarg1; 
  {
    try {
      result = (Ogre::Quaternion *) &((Ogre::TransformKeyFrame const *)arg1)->getRotation();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NodeAnimationTrack_createNodeKeyFrame(void * jarg1, float jarg2) {
  void * jresult ;
  Ogre::NodeAnimationTrack *arg1 = (Ogre::NodeAnimationTrack *) 0 ;
  float arg2 ;
  Ogre::TransformKeyFrame *result = 0 ;
  
  arg1 = (Ogre::NodeAnimationTrack *)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      result = (Ogre::TransformKeyFrame *)(arg1)->createNodeKeyFrame(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_createNodeTrack(void * jarg1, unsigned short jarg2, void * jarg3) {
  void * jresult ;
  Ogre::Animation *arg1 = (Ogre::Animation *) 0 ;
  unsigned short arg2 ;
  Ogre::Node *arg3 = (Ogre::Node *) 0 ;
  Ogre::NodeAnimationTrack *result = 0 ;
  
  arg1 = (Ogre::Animation *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  arg3 = (Ogre::Node *)jarg3; 
  {
    try {
      result = (Ogre::NodeAnimationTrack *)(arg1)->createNodeTrack(arg2,arg3);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationState_setEnabled(void * jarg1, unsigned int jarg2) {
  Ogre::AnimationState *arg1 = (Ogre::AnimationState *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::AnimationState *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setEnabled(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationState_getEnabled(void * jarg1) {
  unsigned int jresult ;
  Ogre::AnimationState *arg1 = (Ogre::AnimationState *) 0 ;
  bool result;
  
  arg1 = (Ogre::AnimationState *)jarg1; 
  {
    try {
      result = (bool)(arg1)->getEnabled();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationState_setLoop(void * jarg1, unsigned int jarg2) {
  Ogre::AnimationState *arg1 = (Ogre::AnimationState *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::AnimationState *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLoop(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationState_getLoop(void * jarg1) {
  unsigned int jresult ;
  Ogre::AnimationState *arg1 = (Ogre::AnimationState *) 0 ;
  bool result;
  
  arg1 = (Ogre::AnimationState *)jarg1; 
  {
    try {
      result = (bool)((Ogre::AnimationState const *)arg1)->getLoop();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationState_addTime(void * jarg1, float jarg2) {
  Ogre::AnimationState *arg1 = (Ogre::AnimationState *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::AnimationState *)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->addTime(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneManager_CreateEntity__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  Ogre::Entity *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  {
    try {
      result = (Ogre::Entity *)(arg1)->createEntity(arg2,arg3);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneManager_CreateEntity__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  std::string arg2 ;
  Ogre::Entity *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  {
    try {
      result = (Ogre::Entity *)(arg1)->createEntity(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneManager_CreateSceneNode__SWIG_0(void * jarg1) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  {
    try {
      result = (Ogre::SceneNode *)(arg1)->createSceneNode();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneManager_CreateSceneNode__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  std::string arg2 ;
  Ogre::SceneNode *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  {
    try {
      result = (Ogre::SceneNode *)(arg1)->createSceneNode(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneManager_GetRootSceneNode(void * jarg1) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  {
    try {
      result = (Ogre::SceneNode *)(arg1)->getRootSceneNode();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneManager_CreateLight__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  std::string arg2 ;
  Ogre::Light *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  {
    try {
      result = (Ogre::Light *)(arg1)->createLight(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneManager_CreateLight__SWIG_1(void * jarg1) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::Light *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  {
    try {
      result = (Ogre::Light *)(arg1)->createLight();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneManager_CreateAnimation(void * jarg1, char * jarg2, float jarg3) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  Ogre::Animation *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  {
    try {
      result = (Ogre::Animation *)(arg1)->createAnimation((std::string const &)*arg2,arg3);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneManager_GetAnimation(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  std::string *arg2 = 0 ;
  Ogre::Animation *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::Animation *)((Ogre::SceneManager const *)arg1)->getAnimation((std::string const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneManager_HasAnimation(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)((Ogre::SceneManager const *)arg1)->hasAnimation((std::string const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneManager_DestroyAnimation(void * jarg1, char * jarg2) {
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->destroyAnimation((std::string const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneManager_CreateAnimationState(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  std::string *arg2 = 0 ;
  Ogre::AnimationState *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::AnimationState *)(arg1)->createAnimationState((std::string const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneManager_destroyAnimationState(void * jarg1, char * jarg2) {
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->destroyAnimationState((std::string const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneManager_getAnimationState(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  std::string *arg2 = 0 ;
  Ogre::AnimationState *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::AnimationState *)(arg1)->getAnimationState((std::string const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_SetPosition(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::Camera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->setPosition(arg2,arg3,arg4);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_GetPosition(void * jarg1) {
  void * jresult ;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::Camera *)jarg1; 
  {
    try {
      result = (Ogre::Vector3 *) &((Ogre::Camera const *)arg1)->getPosition();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_Move(void * jarg1, void * jarg2) {
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  arg1 = (Ogre::Camera *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->move((Ogre::Vector3 const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GroundDisc_setMaterial(void * jarg1, char * jarg2) {
  GroundDisc *arg1 = (GroundDisc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (GroundDisc *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setMaterial((std::string const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PickResult_id_set(void * jarg1, long long jarg2) {
  PickResult *arg1 = (PickResult *) 0 ;
  qint64 arg2 ;
  
  arg1 = (PickResult *)jarg1; 
  arg2 = (qint64)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_PickResult_id_get(void * jarg1) {
  long long jresult ;
  PickResult *arg1 = (PickResult *) 0 ;
  qint64 result;
  
  arg1 = (PickResult *)jarg1; 
  result = (qint64) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PickResult_distance_set(void * jarg1, float jarg2) {
  PickResult *arg1 = (PickResult *) 0 ;
  float arg2 ;
  
  arg1 = (PickResult *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PickResult_distance_get(void * jarg1) {
  float jresult ;
  PickResult *arg1 = (PickResult *) 0 ;
  float result;
  
  arg1 = (PickResult *)jarg1; 
  result = (float) ((arg1)->distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PickResult() {
  void * jresult ;
  PickResult *result = 0 ;
  
  {
    try {
      result = (PickResult *)new PickResult();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PickResult(void * jarg1) {
  PickResult *arg1 = (PickResult *) 0 ;
  
  arg1 = (PickResult *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PickResultList_at(void * jarg1, int jarg2) {
  void * jresult ;
  QList< PickResult > *arg1 = (QList< PickResult > *) 0 ;
  int arg2 ;
  PickResult *result = 0 ;
  
  arg1 = (QList< PickResult > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (PickResult *) &((QList< PickResult > const *)arg1)->at(arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PickResultList_size(void * jarg1) {
  int jresult ;
  QList< PickResult > *arg1 = (QList< PickResult > *) 0 ;
  int result;
  
  arg1 = (QList< PickResult > *)jarg1; 
  {
    try {
      result = (int)((QList< PickResult > const *)arg1)->size();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PickResultList() {
  void * jresult ;
  QList< PickResult > *result = 0 ;
  
  {
    try {
      result = (QList< PickResult > *)new QList< PickResult >();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PickResultList(void * jarg1) {
  QList< PickResult > *arg1 = (QList< PickResult > *) 0 ;
  
  arg1 = (QList< PickResult > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_CreateBackgroundMap(void * jarg1, char * jarg2) {
  void * jresult ;
  Scene *arg1 = (Scene *) 0 ;
  std::string *arg2 = 0 ;
  BackgroundMap *result = 0 ;
  
  arg1 = (Scene *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (BackgroundMap *)(arg1)->createBackgroundMap((std::string const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_CreateGroundDisc(void * jarg1, char * jarg2) {
  void * jresult ;
  Scene *arg1 = (Scene *) 0 ;
  std::string *arg2 = 0 ;
  GroundDisc *result = 0 ;
  
  arg1 = (Scene *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (GroundDisc *)(arg1)->createGroundDisc((std::string const &)*arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_GetMainCamera(void * jarg1) {
  void * jresult ;
  Scene *arg1 = (Scene *) 0 ;
  Ogre::Camera *result = 0 ;
  
  arg1 = (Scene *)jarg1; 
  {
    try {
      result = (Ogre::Camera *)((Scene const *)arg1)->getMainCamera();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_GetCameraOrigin(void * jarg1) {
  void * jresult ;
  Scene *arg1 = (Scene *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Scene *)jarg1; 
  {
    try {
      result = (Ogre::Vector3 *) &((Scene const *)arg1)->getCameraOrigin();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_pick(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Scene *arg1 = (Scene *) 0 ;
  float arg2 ;
  float arg3 ;
  PickResultList *result = 0 ;
  
  arg1 = (Scene *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  {
    try {
      result = (PickResultList *)(arg1)->pick(arg2,arg3);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeEngineSettings_logCallback_set(void * jarg1, /* ctype* */ void* jarg2) {
  NativeEngineSettings *arg1 = (NativeEngineSettings *) 0 ;
  LogCallback arg2 = (LogCallback) 0 ;
  
  arg1 = (NativeEngineSettings *)jarg1; 
  /* in* */ arg2 = static_cast<LogCallback>(jarg2);
  if (arg1) (arg1)->logCallback = arg2;
  /* argout* */
}


SWIGEXPORT /* ctype* out */ void* SWIGSTDCALL CSharp_NativeEngineSettings_logCallback_get(void * jarg1) {
  /* ctype* out */ void* jresult ;
  NativeEngineSettings *arg1 = (NativeEngineSettings *) 0 ;
  LogCallback result;
  
  arg1 = (NativeEngineSettings *)jarg1; 
  result = (LogCallback) ((arg1)->logCallback);
  /* out* */ jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeEngineSettings_argc_set(void * jarg1, int jarg2) {
  NativeEngineSettings *arg1 = (NativeEngineSettings *) 0 ;
  int arg2 ;
  
  arg1 = (NativeEngineSettings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->argc = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeEngineSettings_argc_get(void * jarg1) {
  int jresult ;
  NativeEngineSettings *arg1 = (NativeEngineSettings *) 0 ;
  int result;
  
  arg1 = (NativeEngineSettings *)jarg1; 
  result = (int) ((arg1)->argc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeEngineSettings_argv_set(void * jarg1, void * jarg2) {
  NativeEngineSettings *arg1 = (NativeEngineSettings *) 0 ;
  char **arg2 = (char **) 0 ;
  
  arg1 = (NativeEngineSettings *)jarg1; 
  arg2 = (char **)jarg2; 
  if (arg1) (arg1)->argv = (char const **)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeEngineSettings_argv_get(void * jarg1) {
  void * jresult ;
  NativeEngineSettings *arg1 = (NativeEngineSettings *) 0 ;
  char **result = 0 ;
  
  arg1 = (NativeEngineSettings *)jarg1; 
  result = (char **) ((arg1)->argv);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeEngineSettings() {
  void * jresult ;
  NativeEngineSettings *result = 0 ;
  
  {
    try {
      result = (NativeEngineSettings *)new NativeEngineSettings();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeEngineSettings(void * jarg1) {
  NativeEngineSettings *arg1 = (NativeEngineSettings *) 0 ;
  
  arg1 = (NativeEngineSettings *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeEngine(void * jarg1) {
  void * jresult ;
  NativeEngineSettings *arg1 = (NativeEngineSettings *) 0 ;
  NativeEngine *result = 0 ;
  
  arg1 = (NativeEngineSettings *)jarg1; 
  {
    try {
      result = (NativeEngine *)new NativeEngine((NativeEngineSettings const *)arg1);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeEngine(void * jarg1) {
  NativeEngine *arg1 = (NativeEngine *) 0 ;
  
  arg1 = (NativeEngine *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeEngine_processEvents(void * jarg1) {
  NativeEngine *arg1 = (NativeEngine *) 0 ;
  
  arg1 = (NativeEngine *)jarg1; 
  {
    try {
      (arg1)->processEvents();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeEngine_renderFrame(void * jarg1) {
  NativeEngine *arg1 = (NativeEngine *) 0 ;
  
  arg1 = (NativeEngine *)jarg1; 
  {
    try {
      (arg1)->renderFrame();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeEngine_mainScene(void * jarg1) {
  void * jresult ;
  NativeEngine *arg1 = (NativeEngine *) 0 ;
  Scene *result = 0 ;
  
  arg1 = (NativeEngine *)jarg1; 
  {
    try {
      result = (Scene *)(arg1)->mainScene();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT /* ctype* out */ QObject* SWIGSTDCALL CSharp_NativeEngine_interfaceRoot(void * jarg1) {
  /* ctype* out */ QObject* jresult ;
  NativeEngine *arg1 = (NativeEngine *) 0 ;
  QObject *result = 0 ;
  
  arg1 = (NativeEngine *)jarg1; 
  {
    try {
      result = (QObject *)(arg1)->interfaceRoot();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return /* null* */ NULL; 
      };
    }
  }
  /* out* */ jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeEngine_windowWidth(void * jarg1) {
  int jresult ;
  NativeEngine *arg1 = (NativeEngine *) 0 ;
  int result;
  
  arg1 = (NativeEngine *)jarg1; 
  {
    try {
      result = (int)(arg1)->windowWidth();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeEngine_windowHeight(void * jarg1) {
  int jresult ;
  NativeEngine *arg1 = (NativeEngine *) 0 ;
  int result;
  
  arg1 = (NativeEngine *)jarg1; 
  {
    try {
      result = (int)(arg1)->windowHeight();
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceManager_addZipArchive(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      ResourceManager::addZipArchive((char const *)arg1,(char const *)arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceManager_addDirectory(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      ResourceManager::addDirectory((char const *)arg1,(char const *)arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceManager_remove(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      ResourceManager::remove((char const *)arg1,(char const *)arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceManager_initializeGroup(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    try {
      ResourceManager::initializeGroup((char const *)arg1);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceManager_read__SWIG_0(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  QByteArray *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      result = (QByteArray *)ResourceManager::read((char const *)arg1,(char const *)arg2);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceManager_read__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  QByteArray *result = 0 ;
  
  arg1 = (char *)jarg1; 
  {
    try {
      result = (QByteArray *)ResourceManager::read((char const *)arg1);
    } catch(std::exception &e) {
      {
        SWIG_CSharpException(SWIG_UnknownError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT Ogre::MovableObject * SWIGSTDCALL CSharp_Entity_SWIGUpcast(Ogre::Entity *jarg1) {
    return (Ogre::MovableObject *)jarg1;
}

SWIGEXPORT Ogre::Node * SWIGSTDCALL CSharp_SceneNode_SWIGUpcast(Ogre::SceneNode *jarg1) {
    return (Ogre::Node *)jarg1;
}

SWIGEXPORT Ogre::MovableObject * SWIGSTDCALL CSharp_Light_SWIGUpcast(Ogre::Light *jarg1) {
    return (Ogre::MovableObject *)jarg1;
}

SWIGEXPORT Ogre::MovableObject * SWIGSTDCALL CSharp_GroundDisc_SWIGUpcast(GroundDisc *jarg1) {
    return (Ogre::MovableObject *)jarg1;
}

SWIGEXPORT Ogre::SceneManager * SWIGSTDCALL CSharp_Scene_SWIGUpcast(Scene *jarg1) {
    return (Ogre::SceneManager *)jarg1;
}

#ifdef __cplusplus
}
#endif

